{"version":3,"sources":["util.ts","store.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["URL","getUsersFromAPI","a","fetch","then","response","json","getPostsFromAPI","getCommentsFromAPI","initStore","posts","isError","isLoading","query","filterQuery","getPosts","state","getError","getLoading","getQuery","getFilteredQuery","setError","value","type","setLoading","store","createStore","action","undefined","map","post","id","postId","comments","filter","comment","commentId","item","applyMiddleware","thunk","User","props","user","name","email","address","city","street","zipcode","className","Comment","postID","onDelete","body","onClick","CommentList","key","Post","title","PostList","postList","onDeletePost","onDeleteComment","getMethods","setQuery","setFilterQuery","deletePost","deleteComment","loadAllData","dispatch","Promise","all","usersFromApi","postsFromApi","commentsFromApi","newPosts","find","userId","catch","connect","visiblePosts","useMemo","initialPosts","pattern","RegExp","trim","test","filterPosts","setFilterQueryWithDebonce","useCallback","debounce","length","placeholder","onChange","event","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"4WAAMA,EAAM,wCAOL,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,UACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAFxB,4C,sBAKA,SAAeC,IAAtB,+B,4CAAO,sBAAAL,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,UACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAFxB,4C,sBAKA,SAAeE,IAAtB,+B,4CAAO,sBAAAN,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,aACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAFxB,4C,sBCTP,IAAMG,EAA0B,CAC9BC,MAAO,GACPC,SAAS,EACTC,WAAW,EACXC,MAAO,GACPC,YAAa,IAYFC,EAAW,SAACC,GAAD,OAAyBA,EAAMN,OAC1CO,EAAW,SAACD,GAAD,OAAyBA,EAAML,SAC1CO,EAAa,SAACF,GAAD,OAAyBA,EAAMJ,WAC5CO,EAAW,SAACH,GAAD,OAAyBA,EAAMH,OAC1CO,EAAmB,SAACJ,GAAD,OAAyBA,EAAMF,aAGlDO,EAAW,SAACC,GAAD,MAAgC,CAAEC,KAfnC,iBAeyDD,UACnEE,EAAa,SAACF,GAAD,MAAgC,CAAEC,KAfnC,mBAe2DD,UAiGvEG,EAAQC,aAtFW,WAAuE,IAAtED,EAAqE,uDAA/ChB,EAAWkB,EAAoC,uCACpG,QAAcC,IAAVH,EACF,MAAO,CACLf,MAAO,GACPC,SAAS,EACTC,WAAW,EACXC,MAAO,GACPC,YAAa,IAIjB,OAAQa,EAAOJ,MACb,IAAK,sBACH,OAAO,eACFE,EADL,CAEEf,MAAOe,EAAMf,MAAMmB,KAAI,SAAAC,GACrB,OAAIA,EAAKC,KAAOJ,EAAOK,OACd,eAAKF,GAGP,eACFA,EADL,CAEEG,SAAUH,EAAKG,SAASC,QAAO,SAAAC,GAAO,OACpCA,EAAQJ,KAAOJ,EAAOS,oBAOhC,IAAK,mBACH,OAAO,eAAKX,EAAZ,CAAmBf,MAAOe,EAAMf,MAAMwB,QAAO,SAAAG,GAAI,OAAIA,EAAKN,KAAOJ,EAAOL,WAG1E,IAAK,iBACH,OAAO,eAAKG,EAAZ,CAAmBf,MAAOiB,EAAOL,QAGnC,IAAK,iBACH,OAAO,eAAKG,EAAZ,CAAmBd,QAASgB,EAAOL,QAGrC,IAAK,mBACH,OAAO,eAAKG,EAAZ,CAAmBb,UAAWe,EAAOL,QAGvC,IAAK,iBACH,OAAO,eAAKG,EAAZ,CAAmBZ,MAAOc,EAAOL,QAGnC,IAAK,0BACH,OAAO,eAAKG,EAAZ,CAAmBX,YAAaa,EAAOL,QAGzC,QACE,OAAOG,KA+B6BhB,EAAW6B,YAAgBC,M,iBC3HxDC,G,kBAAkB,SAACC,GAAW,IAAD,EAWpCA,EATFC,KACEC,EAHoC,EAGpCA,KACAC,EAJoC,EAIpCA,MAJoC,IAKpCC,QACEC,EANkC,EAMlCA,KACAC,EAPkC,EAOlCA,OACAC,EARkC,EAQlCA,QAKN,OACE,yBAAKC,UAAU,QACb,8CACA,2CAAaN,EAAb,oBAA6BC,IAC7B,8CAAgBI,EAAhB,aAA4BD,EAA5B,aAAuCD,OCfhCI,G,MAAqB,SAAC,GAAmC,IAAjCf,EAAgC,EAAhCA,QAASgB,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAElDT,EACER,EADFQ,KAAMC,EACJT,EADIS,MAAOS,EACXlB,EADWkB,KAAMtB,EACjBI,EADiBJ,GAGrB,OACE,wBAAIkB,UAAU,WACZ,uBAAGA,UAAU,kBACX,+CAAiBN,EAAjB,MACA,gDAAkBC,KAEpB,uBAAGK,UAAU,iBAAiBI,GAC9B,4BACE9B,KAAK,SACL+B,QAAS,WACPF,EAASD,EAAQpB,KAHrB,QCZOwB,EAAyB,SAAC,GAAoC,IAAlCtB,EAAiC,EAAjCA,SAAUkB,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACzD,OACE,wBAAIH,UAAU,eACXhB,EAASJ,KAAI,SAAAQ,GAAI,OAChB,kBAAC,EAAD,CACEmB,IAAKnB,EAAKN,GACVI,QAASE,EACTc,OAAQA,EACRC,SAAUA,SCPPK,EAAkB,SAAC,GAAwB,IAAtB3B,EAAqB,EAArBA,KAAMsB,EAAe,EAAfA,SAEpCM,EACE5B,EADF4B,MAAOL,EACLvB,EADKuB,KAAMX,EACXZ,EADWY,KAAMT,EACjBH,EADiBG,SAAUF,EAC3BD,EAD2BC,GAG/B,OACE,wBAAIkB,UAAU,QACZ,wBAAIA,UAAU,eAAeS,GAC7B,uBAAGT,UAAU,cAAcI,GAC3B,kBAAC,EAAD,CAAMX,KAAMA,IACZ,kBAAC,EAAD,CAAaT,SAAUA,EAAUmB,SAAUA,EAAUD,OAAQpB,MCRtD4B,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,gBAA3B,OACjC,wBAAIb,UAAU,YACXW,EAAS/B,KAAI,SAACC,GACb,OACE,kBAAC,WAAD,CAAU0B,IAAK1B,EAAKC,IAClB,kBAAC,EAAD,CACED,KAAMA,EACNsB,SAAUU,IAEZ,4BACEvC,KAAK,SACL+B,QAAS,WACPO,EAAa/B,EAAKC,MAHtB,qBC4FJgC,EAAa,CAEjBC,SNjFsB,SAAC1C,GAAD,MAA+B,CAAEC,KAflC,iBAewDD,UMmF7E2C,eNlF8B,SAAC3C,GAAD,MAA+B,CAC7DC,KAhB8B,0BAgBCD,UMkF/B4C,WNhFwB,SAAC5C,GAAD,MAA+B,CAAEC,KAjBlC,mBAiB0DD,UMiFjF6C,cNhF2B,SAACnC,EAAgBI,GAAjB,MAAmD,CAC9Eb,KAlB0B,sBAkBCS,SAAQI,cMgFnCgC,YNhByB,WACzB,OAAO,SAACC,GAIN,OAHAA,EAAShD,GAAS,IAClBgD,EAAS7C,GAAW,IAEb8C,QAAQC,IAAI,CACjBtE,IACAM,IACAC,MACCJ,MAAK,YAAoD,IAAD,mBAAjDoE,EAAiD,KAAnCC,EAAmC,KAArBC,EAAqB,KACzDL,EAAS7C,GAAW,IACpB,IAAMmD,EAAWF,EAAa5C,KAAI,SAAAC,GAChC,OAAO,eACFA,EADL,CAEEY,KAAO8B,EAAaI,MAAK,SAAAvC,GAAI,OAAIA,EAAKN,KAAOD,EAAK+C,UAClD5C,SAAUyC,EAAgBxC,QAAO,SAAAG,GAAI,OAAIA,EAAKL,SAAWF,EAAKC,WAGlEsC,EA3F6D,CAAE9C,KAf9C,iBAeoED,MA2FnEqD,OACjBG,OAAM,WACPT,EAAShD,GAAS,IAClBgD,EAAS7C,GAAW,UMOXuD,eATC,SAAC/D,GAAD,MAA0B,CACxCJ,UAAWM,EAAWF,GACtBL,QAASM,EAASD,GAClBH,MAAOM,EAASH,GAChBN,MAAOK,EAASC,GAChBF,YAAaM,EAAiBJ,MAIA+C,EAAjBgB,EA/FQ,SAACtC,GAAW,IAE/B7B,EAWE6B,EAXF7B,UACAD,EAUE8B,EAVF9B,QACAE,EASE4B,EATF5B,MACAH,EAQE+B,EARF/B,MACAI,EAOE2B,EAPF3B,YAEAkD,EAKEvB,EALFuB,SACAC,EAIExB,EAJFwB,eACAC,EAGEzB,EAHFyB,WACAC,EAEE1B,EAFF0B,cACAC,EACE3B,EADF2B,YAWF,IAAMY,EAAeC,mBACnB,kBATF,SAAqBC,EAAkChD,GACrD,IAAMiD,EAAU,IAAIC,OAAOlD,EAAOmD,OAAQ,MAE1C,OAAOH,EAAahD,QAAO,SAAAJ,GACzB,OAAOqD,EAAQG,KAAKxD,EAAK4B,QAAUyB,EAAQG,KAAKxD,EAAKuB,SAKjDkC,CAAY7E,EAAOI,KACzB,CAACA,EAAaJ,IAGV8E,EAA4BC,sBAChCC,IAASzB,EAAgB,KACzB,IAQF,OAAKvD,EAAMiF,OAkBT,oCACE,qDACA,2BACE1C,UAAU,eACV3B,MAAOT,EACPU,KAAK,OACLqE,YAAY,qBACZC,SA9BN,SAAuBC,GACrB9B,EAAS8B,EAAMC,OAAOzE,OACtBkE,EAA0BM,EAAMC,OAAOzE,UA8BrC,yBAAK2B,UAAU,OACb,kBAAC,EAAD,CACEW,SAAUoB,EACVnB,aAAcK,EACdJ,gBAAiBK,MA7BrB,oCACE,mDACA,4BACE5C,KAAK,SACL+B,QAASc,EACT4B,SAAUpF,GAHZ,cAOA,2BAAIA,EAAY,UAAY,IAC5B,2BAAID,EAAU,iCAAmC,QCjFzDsF,IAASC,OACP,kBAAC,IAAD,CAAUzE,MAAOA,GACf,kBAAC,EAAD,OAEF0E,SAASC,eAAe,W","file":"static/js/main.3be35d24.chunk.js","sourcesContent":["const URL = 'https://jsonplaceholder.typicode.com/';\n\nexport async function dataDownload<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport async function getUsersFromAPI(): Promise<User[]> {\n  return fetch(`${URL}users`)\n    .then(response => response.json());\n}\n\nexport async function getPostsFromAPI(): Promise<Post[]> {\n  return fetch(`${URL}posts`)\n    .then(response => response.json());\n}\n\nexport async function getCommentsFromAPI(): Promise<Comment[]> {\n  return fetch(`${URL}comments`)\n    .then(response => response.json());\n}\n","import {\n  createStore, AnyAction, applyMiddleware, Dispatch, Reducer\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  getCommentsFromAPI, getUsersFromAPI, getPostsFromAPI\n} from './util';\n\nconst initStore: StoragePosts = {\n  posts: [] as PostWithComments[],\n  isError: false,\n  isLoading: false,\n  query: '',\n  filterQuery: '',\n};\n\nconst TYPE_SET_POSTS = 'TYPE_SET_POSTS';\nconst TYPE_SET_ERROR = 'TYPE_SET_ERROR';\nconst TYPE_SET_LOADING = 'TYPE_SET_LOADING';\nconst TYPE_SET_QUERY = 'TYPE_SET_QUERY';\nconst TYPE_SET_FILTERED_QUERY = 'TYPE_SET_FILTERED_QUERY';\nconst TYPE_DELETE_POST = 'TYPE_DELETE_POST';\nconst TYPE_DELETE_COMMENT = 'TYPE_DELETE_COMMENT';\n\n\nexport const getPosts = (state: StoragePosts) => state.posts;\nexport const getError = (state: StoragePosts) => state.isError;\nexport const getLoading = (state: StoragePosts) => state.isLoading;\nexport const getQuery = (state: StoragePosts) => state.query;\nexport const getFilteredQuery = (state: StoragePosts) => state.filterQuery;\n\nexport const setPosts = (value: PostWithComments[]): AnyAction => ({ type: TYPE_SET_POSTS, value });\nexport const setError = (value: boolean): AnyAction => ({ type: TYPE_SET_ERROR, value });\nexport const setLoading = (value: boolean): AnyAction => ({ type: TYPE_SET_LOADING, value });\nexport const setQuery = (value: string): AnyAction => ({ type: TYPE_SET_QUERY, value });\nexport const setFilteredQuery = (value: string): AnyAction => ({\n  type: TYPE_SET_FILTERED_QUERY, value,\n});\nexport const deletePost = (value: number): AnyAction => ({ type: TYPE_DELETE_POST, value });\nexport const deleteComment = (postId: number, commentId: number): AnyAction => ({\n  type: TYPE_DELETE_COMMENT, postId, commentId,\n});\n\n\nexport const reducer: Reducer = (store: StoragePosts = initStore, action: AnyAction): StoragePosts => {\n  if (store === undefined) {\n    return {\n      posts: [] as PostWithComments[],\n      isError: false,\n      isLoading: false,\n      query: '',\n      filterQuery: '',\n    };\n  }\n\n  switch (action.type) {\n    case 'TYPE_DELETE_COMMENT': {\n      return {\n        ...store,\n        posts: store.posts.map(post => {\n          if (post.id !== action.postId) {\n            return { ...post };\n          }\n\n          return {\n            ...post,\n            comments: post.comments.filter(comment => (\n              comment.id !== action.commentId\n            )),\n          };\n        }),\n      };\n    }\n\n    case 'TYPE_DELETE_POST': {\n      return { ...store, posts: store.posts.filter(item => item.id !== action.value) };\n    }\n\n    case 'TYPE_SET_POSTS': {\n      return { ...store, posts: action.value };\n    }\n\n    case 'TYPE_SET_ERROR': {\n      return { ...store, isError: action.value };\n    }\n\n    case 'TYPE_SET_LOADING': {\n      return { ...store, isLoading: action.value };\n    }\n\n    case 'TYPE_SET_QUERY': {\n      return { ...store, query: action.value };\n    }\n\n    case 'TYPE_SET_FILTERED_QUERY': {\n      return { ...store, filterQuery: action.value };\n    }\n\n    default: {\n      return store;\n    }\n  }\n};\n\nexport const loadAllData = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(setError(false));\n    dispatch(setLoading(true));\n\n    return Promise.all([\n      getUsersFromAPI(),\n      getPostsFromAPI(),\n      getCommentsFromAPI(),\n    ]).then(([usersFromApi, postsFromApi, commentsFromApi]) => {\n      dispatch(setLoading(false));\n      const newPosts = postsFromApi.map(post => {\n        return {\n          ...post,\n          user: (usersFromApi.find(item => item.id === post.userId) as User),\n          comments: commentsFromApi.filter(item => item.postId === post.id),\n        };\n      });\n      dispatch(setPosts(newPosts));\n    }).catch(() => {\n      dispatch(setError(true));\n      dispatch(setLoading(false));\n    });\n  };\n};\n\nexport const store = createStore(reducer, initStore, applyMiddleware(thunk));\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\n\nexport const User: FC<Props> = (props) => {\n  const {\n    user: {\n      name,\n      email,\n      address: {\n        city,\n        street,\n        zipcode,\n      },\n    },\n  } = props;\n\n  return (\n    <div className=\"user\">\n      <p>Autor contacts:</p>\n      <p>{`name: ${name}, email: ${email}`}</p>\n      <p>{`address: ${zipcode}, ${street}, ${city}`}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n  postID: number;\n  onDelete: (postId: number, commentId: number) => void;\n}\n\nexport const Comment: FC<Props> = ({ comment, postID, onDelete }) => {\n  const {\n    name, email, body, id,\n  } = comment;\n\n  return (\n    <li className=\"comment\">\n      <p className=\"comment__autor\">\n        <span>{`autor: ${name} `}</span>\n        <span>{`e-mail: ${email}`}</span>\n      </p>\n      <p className=\"comment__text\">{body}</p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          onDelete(postID, id);\n        }}\n      >\n        X\n      </button>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  postID: number;\n  comments: Comment[];\n  onDelete: (postId: number, commentId: number) => void;\n}\n\nexport const CommentList: FC<Props> = ({ comments, postID, onDelete }) => {\n  return (\n    <ul className=\"commentList\">\n      {comments.map(item => (\n        <Comment\n          key={item.id}\n          comment={item}\n          postID={postID}\n          onDelete={onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport './Post.css';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  post: PostWithComments;\n  onDelete: (postId: number, commentId: number) => void;\n}\n\nexport const Post: FC<Props> = ({ post, onDelete }) => {\n  const {\n    title, body, user, comments, id,\n  } = post;\n\n  return (\n    <li className=\"post\">\n      <h3 className=\"post__title\">{title}</h3>\n      <p className=\"post__text\">{body}</p>\n      <User user={user} />\n      <CommentList comments={comments} onDelete={onDelete} postID={id} />\n    </li>\n  );\n};\n","import React, { FC, Fragment } from 'react';\n\nimport './PostList.css';\nimport { Post } from '../Post/Post';\n\n\ninterface Props {\n  postList: PostWithComments[];\n  onDeletePost: (value: number) => void;\n  onDeleteComment: (postId: number, commentId: number) => void;\n}\n\nexport const PostList: FC<Props> = ({ postList, onDeletePost, onDeleteComment }) => (\n  <ul className=\"postList\">\n    {postList.map((post) => {\n      return (\n        <Fragment key={post.id}>\n          <Post\n            post={post}\n            onDelete={onDeleteComment}\n          />\n          <button\n            type=\"button\"\n            onClick={() => {\n              onDeletePost(post.id);\n            }}\n          >\n            delete Post\n          </button>\n        </Fragment>\n      );\n    })}\n  </ul>\n);\n","import React, {\n  FC, useMemo, ChangeEvent, useCallback,\n} from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport './App.css';\n\n\nimport { PostList } from './components/PostList/PostList';\nimport {\n  getLoading,\n  getError,\n  getQuery, getPosts,\n  getFilteredQuery,\n\n  setQuery as setQueryStore,\n  setFilteredQuery as setFilteredQueryStore,\n  deletePost as deletePostStore,\n  deleteComment as deleteCommentStore,\n  loadAllData as loadAllDataStore,\n} from './store';\n\n\ninterface Props {\n  isLoading: boolean;\n  isError: boolean;\n  query: string;\n  posts: PostWithComments[];\n  filterQuery: string;\n\n  setQuery: (value: string) => void;\n  setFilterQuery: (value: string) => void;\n  deletePost: (value: number) => void;\n  deleteComment: (postId: number, commentId: number) => void;\n  loadAllData: () => void;\n}\n\nconst App: FC<Props> = (props) => {\n  const {\n    isLoading,\n    isError,\n    query,\n    posts,\n    filterQuery,\n\n    setQuery,\n    setFilterQuery,\n    deletePost,\n    deleteComment,\n    loadAllData,\n  } = props;\n\n  function filterPosts(initialPosts: PostWithComments[], filter: string): PostWithComments[] {\n    const pattern = new RegExp(filter.trim(), 'gi');\n\n    return initialPosts.filter(post => {\n      return pattern.test(post.title) || pattern.test(post.body);\n    });\n  }\n\n  const visiblePosts = useMemo(\n    () => filterPosts(posts, filterQuery),\n    [filterQuery, posts],\n  );\n\n  const setFilterQueryWithDebonce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  function searchHandler(event: ChangeEvent<HTMLInputElement>) {\n    setQuery(event.target.value);\n    setFilterQueryWithDebonce(event.target.value);\n  }\n\n  if (!posts.length) {\n    return (\n      <>\n        <h1>Redux list of posts</h1>\n        <button\n          type=\"button\"\n          onClick={loadAllData}\n          disabled={isLoading}\n        >\n          Load posts\n        </button>\n        <p>{isLoading ? 'Loading' : ''}</p>\n        <p>{isError ? 'Error occured. Try again later' : ''}</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <input\n        className=\"search-field\"\n        value={query}\n        type=\"text\"\n        placeholder=\"Enter search query\"\n        onChange={searchHandler}\n      />\n      <div className=\"App\">\n        <PostList\n          postList={visiblePosts}\n          onDeletePost={deletePost}\n          onDeleteComment={deleteComment}\n        />\n      </div>\n    </>\n  );\n};\n\nconst getMethods = {\n\n  setQuery: setQueryStore,\n\n  setFilterQuery: setFilteredQueryStore,\n  deletePost: deletePostStore,\n  deleteComment: deleteCommentStore,\n  loadAllData: loadAllDataStore,\n};\n\nconst getData = (state: StoragePosts) => ({\n  isLoading: getLoading(state),\n  isError: getError(state),\n  query: getQuery(state),\n  posts: getPosts(state),\n  filterQuery: getFilteredQuery(state),\n});\n\n\nexport default connect(getData, getMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}