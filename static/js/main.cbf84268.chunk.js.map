{"version":3,"sources":["store/actionTypes.ts","util.ts","store/actionCreators.ts","store/store.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","store/selectors.ts","App.tsx","index.tsx"],"names":["ActionTypes","URL","getUsersFromAPI","a","fetch","then","response","json","getPostsFromAPI","getCommentsFromAPI","setError","value","type","TYPE_SET_ERROR","setLoading","TYPE_SET_LOADING","initStore","posts","isError","isLoading","query","filterQuery","store","createStore","action","undefined","TYPE_DELETE_COMMENT","map","post","id","postId","comments","filter","comment","commentId","TYPE_DELETE_POST","item","TYPE_SET_POSTS","TYPE_SET_QUERY","TYPE_SET_FILTERED_QUERY","applyMiddleware","thunk","User","user","name","email","address","city","street","zipcode","className","Comment","postID","onDelete","body","onClick","CommentList","key","Post","title","PostList","postList","onDeletePost","onDeleteComment","getPosts","state","getError","getLoading","getQuery","getFilteredQuery","getMethods","setQuery","setFilterQuery","deletePost","deleteComment","loadData","dispatch","Promise","all","usersFromApi","postsFromApi","commentsFromApi","newPosts","find","userId","catch","connect","props","visiblePosts","useMemo","initialPosts","pattern","RegExp","trim","test","filterPosts","setFilterQueryWithDebonce","useCallback","debounce","length","placeholder","onChange","event","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"gRAAYA,E,4FCANC,EAAM,wCAOL,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,UACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAFxB,4C,sBAKA,SAAeC,IAAtB,+B,4CAAO,sBAAAL,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,UACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAFxB,4C,sBAKA,SAAeE,IAAtB,+B,4CAAO,sBAAAN,EAAA,+EACEC,MAAM,GAAD,OAAIH,EAAJ,aACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAFxB,4C,gCDjBKP,K,gCAAAA,E,gCAAAA,E,oCAAAA,E,gCAAAA,E,kDAAAA,E,oCAAAA,E,2CAAAA,M,KEGL,IAKMU,EAAW,SAACC,GAAD,MAAgC,CACtDC,KAAMZ,EAAYa,eAClBF,UAGWG,EAAa,SAACH,GAAD,MAAgC,CACxDC,KAAMZ,EAAYe,iBAClBJ,UCAIK,EAA0B,CAC9BC,MAAO,GACPC,SAAS,EACTC,WAAW,EACXC,MAAO,GACPC,YAAa,IA2FFC,EAAQC,aAxFW,WAAuE,IAAtED,EAAqE,uDAA/CN,EAAWQ,EAAoC,uCACpG,QAAcC,IAAVH,EACF,MAAO,CACLL,MAAO,GACPC,SAAS,EACTC,WAAW,EACXC,MAAO,GACPC,YAAa,IAIjB,OAAQG,EAAOZ,MACb,KAAKZ,EAAY0B,oBACf,OAAO,eACFJ,EADL,CAEEL,MAAOK,EAAML,MAAMU,KAAI,SAAAC,GACrB,OAAIA,EAAKC,KAAOL,EAAOM,OACd,eAAKF,GAGP,eACFA,EADL,CAEEG,SAAUH,EAAKG,SAASC,QAAO,SAAAC,GAAO,OACpCA,EAAQJ,KAAOL,EAAOU,oBAOhC,KAAKlC,EAAYmC,iBACf,OAAO,eACFb,EADL,CAEEL,MAAOK,EAAML,MAAMe,QAAO,SAAAI,GAAI,OAAIA,EAAKP,KAAOL,EAAOb,WAGzD,KAAKX,EAAYqC,eACf,OAAO,eAAKf,EAAZ,CAAmBL,MAAOO,EAAOb,QAGnC,KAAKX,EAAYa,eACf,OAAO,eAAKS,EAAZ,CAAmBJ,QAASM,EAAOb,QAGrC,KAAKX,EAAYe,iBACf,OAAO,eAAKO,EAAZ,CAAmBH,UAAWK,EAAOb,QAGvC,KAAKX,EAAYsC,eACf,OAAO,eAAKhB,EAAZ,CAAmBF,MAAOI,EAAOb,QAGnC,KAAKX,EAAYuC,wBACf,OAAO,eAAKjB,EAAZ,CAAmBD,YAAaG,EAAOb,QAGzC,QACE,OAAOW,KA+B6BN,EAAWwB,YAAgBC,M,iBCxGxDC,G,kBAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QACbC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QAEtB,OACE,yBAAKC,UAAU,QACb,8CACA,2CAAaN,EAAb,oBAA6BC,IAC7B,8CAAgBI,EAAhB,aAA4BD,EAA5B,aAAuCD,OCNhCI,G,MAAqB,SAAC,GAAmC,IAAjClB,EAAgC,EAAhCA,QAASmB,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAElDT,EACEX,EADFW,KAAMC,EACJZ,EADIY,MAAOS,EACXrB,EADWqB,KAAMzB,EACjBI,EADiBJ,GAGrB,OACE,wBAAIqB,UAAU,WACZ,uBAAGA,UAAU,kBACX,+CAAiBN,EAAjB,MACA,gDAAkBC,KAEpB,uBAAGK,UAAU,iBAAiBI,GAC9B,4BACE1C,KAAK,SACL2C,QAAS,WACPF,EAASD,EAAQvB,KAHrB,QCZO2B,EAAyB,SAAC,GAAoC,IAAlCzB,EAAiC,EAAjCA,SAAUqB,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACzD,OACE,wBAAIH,UAAU,eACXnB,EAASJ,KAAI,SAAAS,GAAI,OAChB,kBAAC,EAAD,CACEqB,IAAKrB,EAAKP,GACVI,QAASG,EACTgB,OAAQA,EACRC,SAAUA,SCPPK,EAAkB,SAAC,GAAwB,IAAtB9B,EAAqB,EAArBA,KAAMyB,EAAe,EAAfA,SAEpCM,EACE/B,EADF+B,MAAOL,EACL1B,EADK0B,KAAMX,EACXf,EADWe,KAAMZ,EACjBH,EADiBG,SAAUF,EAC3BD,EAD2BC,GAG/B,OACE,wBAAIqB,UAAU,QACZ,wBAAIA,UAAU,eAAeS,GAC7B,uBAAGT,UAAU,cAAcI,GAC3B,kBAAC,EAAD,CAAMX,KAAMA,IACZ,kBAAC,EAAD,CAAaZ,SAAUA,EAAUsB,SAAUA,EAAUD,OAAQvB,MCRtD+B,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,gBAA3B,OACjC,wBAAIb,UAAU,YACXW,EAASlC,KAAI,SAACC,GAAD,OACZ,kBAAC,WAAD,CAAU6B,IAAK7B,EAAKC,IAClB,kBAAC,EAAD,CACED,KAAMA,EACNyB,SAAUU,IAEZ,4BACEnD,KAAK,SACL2C,QAAS,WACPO,EAAalC,EAAKC,MAHtB,qBCpBKmC,EAAW,SAACC,GAAD,OAAyBA,EAAMhD,OAC1CiD,EAAW,SAACD,GAAD,OAAyBA,EAAM/C,SAC1CiD,EAAa,SAACF,GAAD,OAAyBA,EAAM9C,WAC5CiD,EAAW,SAACH,GAAD,OAAyBA,EAAM7C,OAC1CiD,EAAmB,SAACJ,GAAD,OAAyBA,EAAM5C,aCiHzDiD,EAAa,CAEjBC,SRrGsB,SAAC5D,GAAD,MAA+B,CACrDC,KAAMZ,EAAYsC,eAClB3B,UQqGA6D,eRlG8B,SAAC7D,GAAD,MAA+B,CAC7DC,KAAMZ,EAAYuC,wBAClB5B,UQiGA8D,WR9FwB,SAAC9D,GAAD,MAA+B,CACvDC,KAAMZ,EAAYmC,iBAClBxB,UQ6FA+D,cR1F2B,SAAC5C,EAAgBI,GAAjB,MAAmD,CAC9EtB,KAAMZ,EAAY0B,oBAClBI,SACAI,cQwFAyC,SPvCsB,WACtB,OAAO,SAACC,GAIN,OAHAA,EAASlE,GAAS,IAClBkE,EAAS9D,GAAW,IAEb+D,QAAQC,IAAI,CACjB5E,IACAM,IACAC,MACCJ,MAAK,YAAoD,IAAD,mBAAjD0E,EAAiD,KAAnCC,EAAmC,KAArBC,EAAqB,KACzDL,EAAS9D,GAAW,IACpB,ID7FmBH,EC6FbuE,EAAWF,EAAarD,KAAI,SAAAC,GAChC,OAAO,eACFA,EADL,CAEEe,KAAOoC,EAAaI,MAAK,SAAA/C,GAAI,OAAIA,EAAKP,KAAOD,EAAKwD,UAClDrD,SAAUkD,EAAgBjD,QAAO,SAAAI,GAAI,OAAIA,EAAKN,SAAWF,EAAKC,WAGlE+C,GDpGmBjE,ECoGDuE,EDpG2C,CACjEtE,KAAMZ,EAAYqC,eAClB1B,cCmGK0E,OAAM,WACPT,EAASlE,GAAS,IAClBkE,EAAS9D,GAAW,UO8BXwE,eATC,SAACrB,GAAD,MAA0B,CACxC9C,UAAWgD,EAAWF,GACtB/C,QAASgD,EAASD,GAClB7C,MAAOgD,EAASH,GAChBhD,MAAO+C,EAASC,GAChB5C,YAAagD,EAAiBJ,MAIAK,EAAjBgB,EA/FQ,SAACC,GAAW,IAE/BpE,EAWEoE,EAXFpE,UACAD,EAUEqE,EAVFrE,QACAE,EASEmE,EATFnE,MACAH,EAQEsE,EARFtE,MACAI,EAOEkE,EAPFlE,YAEAkD,EAKEgB,EALFhB,SACAC,EAIEe,EAJFf,eACAC,EAGEc,EAHFd,WACAC,EAEEa,EAFFb,cACAC,EACEY,EADFZ,SAWF,IAAMa,EAAeC,mBACnB,kBATF,SAAqBC,EAAkC1D,GACrD,IAAM2D,EAAU,IAAIC,OAAO5D,EAAO6D,OAAQ,MAE1C,OAAOH,EAAa1D,QAAO,SAAAJ,GACzB,OAAO+D,EAAQG,KAAKlE,EAAK+B,QAAUgC,EAAQG,KAAKlE,EAAK0B,SAKjDyC,CAAY9E,EAAOI,KACzB,CAACA,EAAaJ,IAGV+E,EAA4BC,sBAChCC,IAAS1B,EAAgB,KACzB,IAQF,OAAKvD,EAAMkF,OAkBT,oCACE,qDACA,2BACEjD,UAAU,eACVvC,MAAOS,EACPR,KAAK,OACLwF,YAAY,qBACZC,SA9BN,SAAuBC,GACrB/B,EAAS+B,EAAMC,OAAO5F,OACtBqF,EAA0BM,EAAMC,OAAO5F,UA8BrC,yBAAKuC,UAAU,OACb,kBAAC,EAAD,CACEW,SAAU2B,EACV1B,aAAcW,EACdV,gBAAiBW,MA7BrB,oCACE,mDACA,4BACE9D,KAAK,SACL2C,QAASoB,EACT6B,SAAUrF,GAHZ,cAOA,2BAAIA,EAAY,UAAY,IAC5B,2BAAID,EAAU,iCAAmC,QCrFzDuF,IAASC,OACP,kBAAC,IAAD,CAAUpF,MAAOA,GACf,kBAAC,EAAD,OAEFqF,SAASC,eAAe,W","file":"static/js/main.cbf84268.chunk.js","sourcesContent":["export enum ActionTypes {\n  TYPE_SET_POSTS = 'TYPE_SET_POSTS',\n  TYPE_SET_ERROR = 'TYPE_SET_ERROR',\n  TYPE_SET_LOADING = 'TYPE_SET_LOADING',\n  TYPE_SET_QUERY = 'TYPE_SET_QUERY',\n  TYPE_SET_FILTERED_QUERY = 'TYPE_SET_FILTERED_QUERY',\n  TYPE_DELETE_POST = 'TYPE_DELETE_POST',\n  TYPE_DELETE_COMMENT = 'TYPE_DELETE_COMMENT',\n}\n","const URL = 'https://jsonplaceholder.typicode.com/';\n\nexport async function dataDownload<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport async function getUsersFromAPI(): Promise<User[]> {\n  return fetch(`${URL}users`)\n    .then(response => response.json());\n}\n\nexport async function getPostsFromAPI(): Promise<Post[]> {\n  return fetch(`${URL}posts`)\n    .then(response => response.json());\n}\n\nexport async function getCommentsFromAPI(): Promise<Comment[]> {\n  return fetch(`${URL}comments`)\n    .then(response => response.json());\n}\n","import { AnyAction } from 'redux'\nimport { ActionTypes } from './actionTypes'\n\nexport const setPosts = (value: PostWithComments[]): AnyAction => ({\n  type: ActionTypes.TYPE_SET_POSTS,\n  value\n});\n\nexport const setError = (value: boolean): AnyAction => ({\n  type: ActionTypes.TYPE_SET_ERROR,\n  value\n});\n\nexport const setLoading = (value: boolean): AnyAction => ({\n  type: ActionTypes.TYPE_SET_LOADING,\n  value\n});\n\nexport const setQuery = (value: string): AnyAction => ({\n  type: ActionTypes.TYPE_SET_QUERY,\n  value\n});\n\nexport const setFilteredQuery = (value: string): AnyAction => ({\n  type: ActionTypes.TYPE_SET_FILTERED_QUERY,\n  value,\n});\n\nexport const deletePost = (value: number): AnyAction => ({\n  type: ActionTypes.TYPE_DELETE_POST,\n  value\n});\n\nexport const deleteComment = (postId: number, commentId: number): AnyAction => ({\n  type: ActionTypes.TYPE_DELETE_COMMENT,\n  postId,\n  commentId,\n});\n","import {\n  createStore, AnyAction, applyMiddleware, Dispatch, Reducer\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  getCommentsFromAPI, getUsersFromAPI, getPostsFromAPI\n} from '../util';\n\nimport { ActionTypes } from './actionTypes'\nimport {\n  setLoading,\n  setError,\n  setPosts\n} from './actionCreators'\n\nconst initStore: StoragePosts = {\n  posts: [] as PostWithComments[],\n  isError: false,\n  isLoading: false,\n  query: '',\n  filterQuery: '',\n};\n\nexport const reducer: Reducer = (store: StoragePosts = initStore, action: AnyAction): StoragePosts => {\n  if (store === undefined) {\n    return {\n      posts: [] as PostWithComments[],\n      isError: false,\n      isLoading: false,\n      query: '',\n      filterQuery: '',\n    };\n  }\n\n  switch (action.type) {\n    case ActionTypes.TYPE_DELETE_COMMENT: {\n      return {\n        ...store,\n        posts: store.posts.map(post => {\n          if (post.id !== action.postId) {\n            return { ...post };\n          }\n\n          return {\n            ...post,\n            comments: post.comments.filter(comment => (\n              comment.id !== action.commentId\n            )),\n          };\n        }),\n      };\n    }\n\n    case ActionTypes.TYPE_DELETE_POST: {\n      return {\n        ...store,\n        posts: store.posts.filter(item => item.id !== action.value) };\n    }\n\n    case ActionTypes.TYPE_SET_POSTS: {\n      return { ...store, posts: action.value };\n    }\n\n    case ActionTypes.TYPE_SET_ERROR: {\n      return { ...store, isError: action.value };\n    }\n\n    case ActionTypes.TYPE_SET_LOADING: {\n      return { ...store, isLoading: action.value };\n    }\n\n    case ActionTypes.TYPE_SET_QUERY: {\n      return { ...store, query: action.value };\n    }\n\n    case ActionTypes.TYPE_SET_FILTERED_QUERY: {\n      return { ...store, filterQuery: action.value };\n    }\n\n    default: {\n      return store;\n    }\n  }\n};\n\nexport const loadData = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(setError(false));\n    dispatch(setLoading(true));\n\n    return Promise.all([\n      getUsersFromAPI(),\n      getPostsFromAPI(),\n      getCommentsFromAPI(),\n    ]).then(([usersFromApi, postsFromApi, commentsFromApi]) => {\n      dispatch(setLoading(false));\n      const newPosts = postsFromApi.map(post => {\n        return {\n          ...post,\n          user: (usersFromApi.find(item => item.id === post.userId) as User),\n          comments: commentsFromApi.filter(item => item.postId === post.id),\n        };\n      });\n      dispatch(setPosts(newPosts));\n    }).catch(() => {\n      dispatch(setError(true));\n      dispatch(setLoading(false));\n    });\n  };\n};\n\nexport const store = createStore(reducer, initStore, applyMiddleware(thunk));\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { city, street, zipcode } = address\n\n  return (\n    <div className=\"user\">\n      <p>Autor contacts:</p>\n      <p>{`name: ${name}, email: ${email}`}</p>\n      <p>{`address: ${zipcode}, ${street}, ${city}`}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n  postID: number;\n  onDelete: (postId: number, commentId: number) => void;\n}\n\nexport const Comment: FC<Props> = ({ comment, postID, onDelete }) => {\n  const {\n    name, email, body, id,\n  } = comment;\n\n  return (\n    <li className=\"comment\">\n      <p className=\"comment__autor\">\n        <span>{`autor: ${name} `}</span>\n        <span>{`e-mail: ${email}`}</span>\n      </p>\n      <p className=\"comment__text\">{body}</p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          onDelete(postID, id);\n        }}\n      >\n        X\n      </button>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  postID: number;\n  comments: Comment[];\n  onDelete: (postId: number, commentId: number) => void;\n}\n\nexport const CommentList: FC<Props> = ({ comments, postID, onDelete }) => {\n  return (\n    <ul className=\"commentList\">\n      {comments.map(item => (\n        <Comment\n          key={item.id}\n          comment={item}\n          postID={postID}\n          onDelete={onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport './Post.css';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  post: PostWithComments;\n  onDelete: (postId: number, commentId: number) => void;\n}\n\nexport const Post: FC<Props> = ({ post, onDelete }) => {\n  const {\n    title, body, user, comments, id,\n  } = post;\n\n  return (\n    <li className=\"post\">\n      <h3 className=\"post__title\">{title}</h3>\n      <p className=\"post__text\">{body}</p>\n      <User user={user} />\n      <CommentList comments={comments} onDelete={onDelete} postID={id} />\n    </li>\n  );\n};\n","import React, { FC, Fragment } from 'react';\n\nimport './PostList.css';\nimport { Post } from '../Post/Post';\n\n\ninterface Props {\n  postList: PostWithComments[];\n  onDeletePost: (value: number) => void;\n  onDeleteComment: (postId: number, commentId: number) => void;\n}\n\nexport const PostList: FC<Props> = ({ postList, onDeletePost, onDeleteComment }) => (\n  <ul className=\"postList\">\n    {postList.map((post) => (\n      <Fragment key={post.id}>\n        <Post\n          post={post}\n          onDelete={onDeleteComment}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            onDeletePost(post.id);\n          }}\n        >\n          delete Post\n        </button>\n      </Fragment>\n    ))}\n  </ul>\n);\n","export const getPosts = (state: StoragePosts) => state.posts;\nexport const getError = (state: StoragePosts) => state.isError;\nexport const getLoading = (state: StoragePosts) => state.isLoading;\nexport const getQuery = (state: StoragePosts) => state.query;\nexport const getFilteredQuery = (state: StoragePosts) => state.filterQuery;\n","import React, {\n  FC, useMemo, ChangeEvent, useCallback,\n} from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport './App.css';\n\n\nimport { PostList } from './components/PostList/PostList';\nimport {\n  getLoading,\n  getError,\n  getQuery,\n  getPosts,\n  getFilteredQuery,\n} from './store/selectors';\n\nimport { loadData as loadDataStore } from './store/store';\n\nimport {\n  setQuery as setQueryStore,\n  setFilteredQuery as setFilteredQueryStore,\n  deletePost as deletePostStore,\n  deleteComment as deleteCommentStore,\n} from './store/actionCreators'\n\n\ninterface Props {\n  isLoading: boolean;\n  isError: boolean;\n  query: string;\n  posts: PostWithComments[];\n  filterQuery: string;\n\n  setQuery: (value: string) => void;\n  setFilterQuery: (value: string) => void;\n  deletePost: (value: number) => void;\n  deleteComment: (postId: number, commentId: number) => void;\n  loadData: () => void;\n}\n\nconst App: FC<Props> = (props) => {\n  const {\n    isLoading,\n    isError,\n    query,\n    posts,\n    filterQuery,\n\n    setQuery,\n    setFilterQuery,\n    deletePost,\n    deleteComment,\n    loadData,\n  } = props;\n\n  function filterPosts(initialPosts: PostWithComments[], filter: string): PostWithComments[] {\n    const pattern = new RegExp(filter.trim(), 'gi');\n\n    return initialPosts.filter(post => {\n      return pattern.test(post.title) || pattern.test(post.body);\n    });\n  }\n\n  const visiblePosts = useMemo(\n    () => filterPosts(posts, filterQuery),\n    [filterQuery, posts],\n  );\n\n  const setFilterQueryWithDebonce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  function searchHandler(event: ChangeEvent<HTMLInputElement>) {\n    setQuery(event.target.value);\n    setFilterQueryWithDebonce(event.target.value);\n  }\n\n  if (!posts.length) {\n    return (\n      <>\n        <h1>Redux list of posts</h1>\n        <button\n          type=\"button\"\n          onClick={loadData}\n          disabled={isLoading}\n        >\n          Load posts\n        </button>\n        <p>{isLoading ? 'Loading' : ''}</p>\n        <p>{isError ? 'Error occured. Try again later' : ''}</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <input\n        className=\"search-field\"\n        value={query}\n        type=\"text\"\n        placeholder=\"Enter search query\"\n        onChange={searchHandler}\n      />\n      <div className=\"App\">\n        <PostList\n          postList={visiblePosts}\n          onDeletePost={deletePost}\n          onDeleteComment={deleteComment}\n        />\n      </div>\n    </>\n  );\n};\n\nconst getMethods = {\n\n  setQuery: setQueryStore,\n\n  setFilterQuery: setFilteredQueryStore,\n  deletePost: deletePostStore,\n  deleteComment: deleteCommentStore,\n  loadData: loadDataStore,\n};\n\nconst getData = (state: StoragePosts) => ({\n  isLoading: getLoading(state),\n  isError: getError(state),\n  query: getQuery(state),\n  posts: getPosts(state),\n  filterQuery: getFilteredQuery(state),\n});\n\n\nexport default connect(getData, getMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}